# 해싱과 선형 조사

class Hashing:
    def __init__(self, bucket, slot, hf):
        self.size=bucket*slot
        self.bucket=bucket
        self.slot=slot
        self.table={}
        self.collision=[]
        self.hf=hf
        for b in range(self.bucket):
            self.table[b]=[]
    def hf1(self, key): # 해시함수 1
        return (ord(key[0])-ord('a'))%self.bucket # 첫글자 ord 값에 따름
    def hf2(self, key): # 해시함수 2
        total=0
        for s in key: # key의 모든 글자에 대한 ord를 합친 값에 따름
            total+=ord(s)
        return total%self.bucket
    def add_table(self, sym):
        if self.hf==1: # 선택한 해시 함수로 address를 구함
            addr=self.hf1(sym)
        elif self.hf==2:
            addr=self.hf2(sym)
        if sym in self.table[addr]: # sym이 이미 존재할 때
            print(sym, '이미 존재합니다')
            return
        
        if len(self.table[addr]) < self.slot: # slot에 자리가 있을 때
            self.table[addr].append(sym)
        else: # 구한 address bucket의 slot이 꽉 차있으면
            self.linearprobing(sym, addr) # linear probing 시행
        
    def linearprobing(self, sym, addr):
        i=1  
        while (len(self.table[(addr+i)%self.bucket])==self.slot): # 빈 slot찾을 때 까지 수행
            if sym in self.table[(addr+i)%self.bucket]: # 선형 조사 중 sym을 찾았을 때
                print(sym,'이미 존재합니다')
                return # while문 탈출
            i+=1 # 빈 slot을 찾을 때 까지 i를 증가
            if (addr+i)%self.bucket == addr: # home address로 돌아왔을 때 == 모든 bucket이 full
                self.collision.append(sym) # collision list에 sym 추가
                print('모든 버킷이 꽉 찼습니다')
                return
        self.table[(addr+i)%self.bucket].append(sym) # 찾은 빈 slot에 sym을 append
    
    def view_table(self):
        print("hash table")
        for b in range(self.bucket):
            print('%2d '%b, self.table[b])

# Example
symbol =['acos', 'atoi', 'char', 'define', 'exp', \
'ceil','ceil','cos', 'float', 'atol', 'floor', 
'ctime'\
'for', 'do', 'while','if','else', 'function']
h=Hashing(13,1,1)
print('buckets=', h.bucket, 'slot=', h.slot)
print("hash function = ", h.hf)
print("symbols = ", len(symbol))
for item in symbol:
    h.add_table(item)
h.view_table()
print("collision = ", h.collision)
print("collision = ", len(h.collision))
print()
